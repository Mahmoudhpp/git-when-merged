#! /usr/bin/python2

""" For each branch given, show the merge that brought a commit into it.

Usage:
    git when-merged [-d] <commit> <branch1> [<branch2> [...]]
    git when-merged [-d] -j
    git when-merged [-d|-v] <commit> <branch>
Options:
    -d  display the diff of each merge commit
    -v  start gitk, selecting the merge commit
    -j  set the branch list to the currently active jpk branches

Based on:
    http://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
"""

import sys
import re
import subprocess
import optparse


JPK_BRANCHES_RE = re.compile(
    r"""
    ^refs\/remotes\/
    (
    jpk\/
    (?:
    (?:nt-)?release\-\d+\.\d+
    |
    master
    )
    )
    $
    """,
    re.VERBOSE,
    )


def iter_release_branches():
    process = subprocess.Popen(
        ['git', 'for-each-ref', 'refs/remotes/jpk'],
        stdout=subprocess.PIPE,
        )
    for line in process.stdout:
        (sha1, type, name) = line.strip().split()
        if type == 'commit':
            m = JPK_BRANCHES_RE.match(name)
            if m:
                yield m.group(1)

    retcode = process.wait()
    if retcode:
        raise RuntimeError('git for-each-ref failed')


def rev_parse(arg):
    process = subprocess.Popen(
        ['git', 'rev-parse', '--verify', '--quiet', arg],
        stdout=subprocess.PIPE,
        )
    (out, err) = process.communicate()
    retcode = process.poll()
    if retcode:
        raise RuntimeError('%r is not a valid commit!' % (arg,))
    return out.strip()


def rev_list(*args):
    process = subprocess.Popen(
        ['git', 'rev-list'] + list(args),
        stdout=subprocess.PIPE,
        )
    for line in process.stdout:
        yield line.strip()

    retcode = process.wait()
    if retcode:
        raise RuntimeError('git rev-list %s failed' % (' '.join(args),))


def find_merge(commit, branch):
    """Return the SHA1 of the commit that merged commit into branch.

    It is assumed that content is always merged in via the second or
    subsequent parents of a merge commit."""

    branch_commits = set(rev_list('%s^..%s' % (commit, branch,), '--first-parent'))

    if commit in branch_commits:
        sys.stdout.write('Branch %-14s: Commit was made directly on this branch.\n' % (branch,))
        return None

    last = None
    for commit in rev_list('%s..%s' % (commit, branch,), '--ancestry-path'):
        if commit in branch_commits:
            last = commit

    if not last:
        sys.stdout.write('Branch %-14s: Does not contain commit.\n' % (branch,))
    else:
        sys.stdout.write('Branch %-14s: %s\n' % (branch, last,))

    return last


def main(args):
    parser = optparse.OptionParser(
        prog='git when-merged',
        description=__doc__,
        usage='%prog [--diff|-d] [--visualize|-v] [--jpk-branches|-j] COMMIT [BRANCH...]',
        )

    parser.add_option(
        '--diff', '-d', action='store_true', default=False,
        help='Show the contents of the merge commit.',
        )
    parser.add_option(
        '--visualize', '-v', action='store_true', default=False,
        help='Visualize the merge commit using gitk.',
        )
    parser.add_option(
        '--jpk-branches', '-j', action='store_true', default=False,
        help='Show where the commit was merged into the main JPK branches.',
        )

    (options, args) = parser.parse_args(args)

    if not args:
        parser.error('You must specify a COMMIT argument')

    commit = args.pop(0)
    # Convert commit into a SHA1:
    commit = rev_parse(commit)

    if options.jpk_branches:
        branches = list(iter_release_branches()) + args
    elif args:
        branches = list(args)
    else:
        branches = ['HEAD']

    for branch in branches:
        merge = find_merge(commit, branch)

        if not merge:
            continue

        if options.diff:
            subprocess.check_call(['git', 'show', merge])

        if options.visualize:
            subprocess.check_call(['gitk', '--all', '--select-commit=%s' % (merge,)])


main(sys.argv[1:])

